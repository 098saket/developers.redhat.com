<?php
/**
 * @file
 * Add various functionalities here.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\AlertCommand;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\rhd_common\Ajax\CKEditorSetDataCommand;
use Drupal\views\Ajax\HighlightCommand;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_form_alter().
 */
function rhd_common_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    // If Article add form, add custom form validator.
    if ($form_id == 'node_article_edit_form' || $form_id == 'node_article_form') {
        $pathauto = $form['path']['widget'][0]['pathauto'];
        if ($form_id != 'node_article_edit_form') {
            $form['path']['widget'][0]['pathauto']['#default_value'] = 0;
        }
        $form['path']['widget'][0]['alias']['#states']['disabled']['input[name="path[0][pathauto]"]']['checked'] = 0;
        // Override default validator with custom validator.
        if (!empty($form['path'])) {
            // Check if widget array is not empty.
            if (!empty($form['path']['widget'])) {
                $form['path']['widget'][0]['#element_validate'][0] = 'rhd_common_custom_form_validator';
            }
        }
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rhd_common_form_node_video_resource_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
    $form['field_video_resource']['widget'][0]['value']['#attached']['library'][] = 'rhd_common/ckeditor_commands';
    $form['field_video_resource']['widget'][0]['value']['#ajax'] = [
      'callback' => 'rhd_common_ajax_test',
      'event' => 'change'
    ];
}

function rhd_common_ajax_test(array &$form, FormStateInterface $form_state) {
    $response = new AjaxResponse();

    $key = \Drupal::config('redhat_developers')->get('google_api_key');

    // Send error if no config, developers can fix this
    if (is_null($key)) {
        $response->addCommand(new AlertCommand('No Google API Key configured'));
        return $response;
    }

    // I hate having to do this, but it's better than magic numbers IMO
    $video_url = current(current($form_state->getValue('field_video_resource')));

    if (!empty($video_url)) {
        // TODO: do a youtube check
        $video = NULL;
        try {
            $youtube = new Madcoda\Youtube\Youtube(array('key' => $key));
            $video = $youtube->getVideoInfo(getYouTubeVideoId($video_url));
        } catch (Exception $e) {
            $response->addCommand(new AlertCommand($e->getMessage()));
            return $response;
        }

        // Each of these are values we're pulling from the data feed from the provider
        $response->addCommand(new CKEditorSetDataCommand($video->snippet->description, 'edit-body-0-value'));
        $response->addCommand(new InvokeCommand('#edit-title-0-value', 'val', [$video->snippet->title]));
        $response->addCommand(new InvokeCommand('#edit-field-views-0-value', 'val', [$video->statistics->viewCount]));
        $response->addCommand(new InvokeCommand('#edit-field-likes-0-value', 'val', [$video->statistics->likeCount]));
        $published_date = new DateTime($video->snippet->publishedAt);
        $response->addCommand(new InvokeCommand('#edit-field-video-publish-date-0-value-date', 'val', [$published_date->format('Y-m-d')]));
        $response->addCommand(new InvokeCommand('#edit-field-video-publish-date-0-value-time', 'val', [$published_date->format('H:m:s')]));
        $response->addCommand(new InvokeCommand('#edit-field-video-thumbnail-url-0-value', 'val',
          [$video->snippet->thumbnails->default->url]));

        // Set seconds, minutes, hours in that order
        $duration = new DateInterval($video->contentDetails->duration); // ->h // ->i // ->s
        $response->addCommand(new InvokeCommand('#edit-field-duration-0-interval', 'val', [$duration->s]));
        $response->addCommand(new InvokeCommand('#edit-field-duration-1-interval', 'val', [$duration->i]));
        $response->addCommand(new InvokeCommand('#edit-field-duration-1-period', 'val', ['minute']));
        $response->addCommand(new InvokeCommand('#edit-field-duration-2-interval', 'val', [$duration->h]));
        $response->addCommand(new InvokeCommand('#edit-field-duration-2-period', 'val', ['hour']));

        // Build the url alias and set that
        $response->addCommand(new InvokeCommand('#edit-path-0-alias', 'val',
          ['/video/youtube/' . getYouTubeVideoId($video_url)]));
    }

    return $response;
}

/**
 * Obtains and returns the video id from a YouTube URL.
 * @param string $url Raw YouTube url
 * @return string the discovered id.
 */
function getYouTubeVideoId(string $url) {
    $id = [];
    $parsed_url = parse_url($url);

    if (isset($parsed_url['query'])) {
        parse_str($parsed_url['query'], $id);
        $id = $id['v'];
    } else {
        $id = substr($parsed_url['path'], 1);
    }
    return $id;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rhd_common_form_node_events_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    add_events_validations($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rhd_common_form_node_events_edit_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    add_events_validations($form, $form_state);
}

function add_events_validations(array &$form, FormStateInterface $form_state)
{
    // Simple closure to test that the end date is after the start date
    $end_date_validator = function (array &$element, FormStateInterface $form_state) {
        // Basic date comparison
        $end_before_start = $form_state->getValue('field_end_date')[0]['value'] < $form_state->getValue('field_start_date')[0]['value']['object'];
        if ($end_before_start === TRUE)
        {
            $form_state->setError($element, t('End Date must be after Start Date')); // Create the error
        }
    };
    // Add all validation closure to the element
    $form['field_end_date']['#element_validate'][] = $end_date_validator;

    $title_length_validator = function (array &$element, FormStateInterface $form_state, $complete_form) {
        $title = $form_state->getValue('title')[0]['value'];

        if (strlen($title) < 5 || strlen($title) > 45)
        {
            $form_state->setError($element, t('Title must be greater than 5 characters and less than 45'));
        }
    };
    $form['field_title']['#element_validate'][] = $title_length_validator;

    $desc_length_validator = function (array &$element, FormStateInterface $form_state, $complete_form) {
        $desc = $form_state->getValue('field_description')[0]['value'];

        if (strlen($desc) < 50 || strlen($desc) > 400)
        {
            $form_state->setError($element, t('Description must be greater than 50 characters and less than 400'));
        }
    };
    $form['field_description']['#element_validate'][] = $desc_length_validator;
}

function rhd_common_form_node_books_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    add_books_validations($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rhd_common_form_node_books_edit_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    add_books_validations($form, $form_state);
}

function add_books_validations(array &$form, FormStateInterface $form_state)
{
    // Simple closure to test that the end date is after the start date
    $isbn_validator = function (array &$element, FormStateInterface $form_state) {
        // Basic date comparison
        $isbn_number = $form_state->getValue('field_isbn')[0]['value'];
        if (!is_numeric($isbn_number) && !empty($isbn_number))
        {
            $form_state->setError($element, t('The ISBN field must be a number!')); // Create the error
        }
        if (strlen($isbn_number) != 13 && strlen($isbn_number) != 10 && !empty($isbn_number))
        {
            $form_state->setError($element, t('The ISBN field must be a valid 10 or 13 digit number!')); // Create the error
        }

    };
    // Add all validation closure to the element
    $form['field_isbn']['#element_validate'][] = $isbn_validator;
}
/**
 * Implements hook_form_FORM_ID_alter().
 */
function rhd_common_form_node_connectors_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    add_connectors_validations($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function rhd_common_form_node_connectors_edit_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    add_connectors_validations($form, $form_state);
}

function add_connectors_validations(array &$form, FormStateInterface $form_state)
{

    $title_length_validator = function (array &$element, FormStateInterface $form_state, $complete_form) {
        $title = $form_state->getValue('title')[0]['value'];

        if (strlen($title) < 1 || strlen($title) > 50)
        {
            $form_state->setError($element, t('Title must be greater than 1 character and less than 50'));
        }
    };
    $form['title']['#element_validate'][] = $title_length_validator;


    // Check that Short Description is between 50 and 150 characters long
    $short_description_length_validator = function (array &$element, FormStateInterface $form_state, $complete_form) {
        $short_description = $form_state->getValue('field_connector_short_descriptio')[0]['value'];

        if (strlen($short_description) < 50 || strlen($short_description) > 150)
        {
            $form_state->setError($element, t('Short description must be greater than 50 characters and less than 150'));
        }
    };
    $form['field_connector_short_descriptio']['#element_validate'][] = $short_description_length_validator;

    // Check that Long Description is between 50 and 150 characters long
    $long_description_length_validator = function (array &$element, FormStateInterface $form_state, $complete_form) {
        $long_description = $form_state->getValue('field_connector_long_description')[0]['value'];

        if (strlen($long_description) < 100 || strlen($long_description) > 500)
        {
            $form_state->setError($element, t('Long description must be greater than 100 characters and less than 500'));
        }
    };
    $form['field_connector_long_description']['#element_validate'][] = $long_description_length_validator;
}


/**
 * Custom form validator.
 */
function rhd_common_custom_form_validator(array &$element, FormStateInterface $form_state)
{
    // Trim the submitted value of whitespace and slashes.
    $alias = rtrim(trim($element['alias']['#value']), " \\/");
    $element['alias']['#attached']['library'][] = 'rhd_common/sample_library';
    if (empty($element['pathauto']['#checked']) && empty($alias)) {
        $form_state->setError($element, t('please add a url alias.'));
    }

    if (!empty($alias)) {
        // Check if alias already has a slash.
        if (substr($alias, 0, 1) !== '/') {
            $alias = '/' . $alias;
        }
        $form_state->setValueForElement($element['alias'], $alias);
        // Validate that the submitted alias does not exist yet.
        $is_exists = \Drupal::service('path.alias_storage')
          ->aliasExists($alias, $element['langcode']['#value'], $element['source']['#value']);
        if ($is_exists) {
            $form_state->setError($element, t('The alias is already in use.'));
        }
    }

    if ($alias && $alias[0] !== '/') {
        $form_state->setError($element, t('The alias needs to start with a slash.'));
    }
}

/**
 * Implements hook_theme().
 */
function rhd_common_theme($existing, $type, $theme, $path)
{
    return [
      'product-pages' => [
        'render element' => 'elements',
      ],
      'get_started_tabs' => [
        'variables' => ['items' => []]
      ]
    ];
}

/**
 * Implements hook_node_view().
 */
function rhd_common_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode)
{
    if ($view_mode == 'full' && $node->getType() === 'product') {
        $current_path = \Drupal::service('path.current')->getPath();
        $path_args = explode('/', $current_path);
        if ($path_args[1] == 'node') {
            $product_code = $node->field_url_product_name->value;
            if (!empty($product_code)) {
                $url = Url::fromRoute('rhd_common.main_page_controller', array(
                  'product_code' => $product_code,
                  'sub_page' => 'overview',
                ), array('absolute' => true))->toString();
                $response = new RedirectResponse($url);
                $response->send();
            }
        }
    }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function rhd_common_preprocess_paragraph(&$variables)
{
    // I don't like the way you have to do this, but that just seems to be drupal
    // Pulling out the product_machine_name field from the parent node of the
    // paragraph so we can use it in the paragraph template as well.
    $entity = $variables['paragraph']->getParentEntity();
    if ($entity instanceof \Drupal\Core\Entity\FieldableEntityInterface) {
        if ($entity->hasField('field_product_machine_name')) {
            $variables['product_machine_name'] = $entity->field_product_machine_name->value;

            // Same thing for the name of the product
            $variables['product_name'] = $entity->label();
        }

        // Same thing for the short name, but if there isn't one, use the long name
        if ($entity->hasField('field_product_short_name')) {
            $variables['product_short_name'] = $entity->field_product_short_name->value;
        } else {
            $variables['product_short_name'] = $variables['product_name'];
        }
    }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocessor for the overview paragraph
 */
function rhd_common_preprocess_paragraph__overview(&$variables)
{
    $paragraph = $variables['paragraph'];
    $variables['features'] = array_map('build_feature_grouping',
      $paragraph->field_product_overview_features->referencedEntities());
}

/**
 * @param \Drupal\paragraphs\Entity\Paragraph $feature
 * @return array
 */
function build_feature_grouping($feature)
{
    $builder = \Drupal::entityTypeManager()->getViewBuilder('media');
    $feature->field_media_reference->referencedEntities()[0];

    $image_array = $feature->field_paragraph_image_image->view(['label' => 'visually_hidden']);

    if (empty($image_array['#theme'])) {
      $image_array = $builder->view($feature->field_media_reference->referencedEntities()[0], 'embedded');
    }

    return [
      'image' => $image_array,
      'title' => $feature->field_paragraph_image_title->view(['label' => 'visually_hidden']),
      'body' => $feature->field_paragraph_image_body->view(['label' => 'visually_hidden']),
    ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function rhd_common_preprocess_paragraph__community(&$variables)
{
    $paragraph = $variables['paragraph'];
    $variables['display_projects'] = (bool)$paragraph->field_display_projects->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function rhd_common_preprocess_paragraph__download(&$variables)
{
    $paragraph = $variables['paragraph'];
    $variables['offer_subscription'] = (bool)$paragraph->field_offer_subscription->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function rhd_common_preprocess_paragraph__help(&$variables)
{
    $paragraph = $variables['paragraph'];
    $variables['show_stack_overflow'] = (bool)$paragraph->field_show_stack_overflow->value;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function rhd_common_preprocess_paragraph__get_started(&$variables)
{
    $paragraph = $variables['paragraph'];
    $tab_count = $paragraph->field_tabs->count();
    $tab_links = [];

    $variables['tab_panels'] = [
      '#theme' => 'get_started_tabs',
      '#items' => []
    ];

    // Build up a render array for the tab bar.
    // This is much easier here than in twig where I cannot access php functions.
    // We only want to show a tab bar if there's more than one tab
    if ($tab_count > 1) {
        $tab_links = [
          '#theme' => 'item_list',
          '#list_type' => 'ul',
          '#attributes' => [
            'class' => 'tabs nav-tabs current-tabs',
            'data-tab' => '',
            'role' => 'tablist',
            'data-options' => 'scroll_to_content:false;deep_linking:true;'
          ]
        ];
    }

    foreach ($paragraph->field_tabs as $index => $tab_item) {
        $tab = $tab_item->entity;
        $url_field_title = \Drupal\Component\Utility\Html::getId($tab->field_title->value);
        $variables['tab_panels']['#items'][] = $tab;

        if ($tab_count > 1) {
            $tab_links['#items'][] = [
              '#type' => 'link',
              '#title' => $tab->field_title->value,
              '#url' => Url::fromUri('internal:#' . $url_field_title),
              '#attributes' => [
                'role' => 'tab',
                'tabindex' => '0',
                'aria-selected' => 'false',
                'aria-controls' => $url_field_title
              ],
                // #wrapper_attributes are for the li, or the things wrapping the link
              '#wrapper_attributes' => [
                'role' => 'presentation',
                'class' => (function () use ($index) {
                    if ($index === 0) {
                        return 'active';
                    } else {
                        return '';
                    }
                })()
              ]
            ];
        }
    }

    $variables['tab_bar'] = $tab_links;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function rhd_common_preprocess_get_started_tabs(&$variables)
{
    // Each item is going to be a reference to a paragraph,
    // we want the actual paragraph available in the view
    foreach ($variables['items'] as $tab_index => $tab) {
        $variables['tabs'][$tab_index] = [
          'title' => $tab->field_title->value,
          'preamble' => $tab->field_body->view(['label' => 'visually_hidden']),
          'sections' => []
        ];

        foreach ($tab->field_blue_sections as $blue_section_index => $blue_section) {
            $blue_section_entity = $blue_section->entity;
            $variables['tabs'][$tab_index]['sections'][$blue_section_index] = [];
            $blue_section_render = &$variables['tabs'][$tab_index]['sections'][$blue_section_index];

            $blue_section_render['title'] = $blue_section_entity->field_title->value;
            $blue_section_render['minutes'] = $blue_section_entity->field_minutes_to_complete->value;
            $blue_section_render['body'] = $blue_section_entity->field_body->view(['label' => 'visually_hidden']);
            $blue_section_render['supports_progress'] = (bool) $blue_section_entity->field_support_progress->value;
        }
    }
    unset($variables['items']);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function rhd_common_preprocess_paragraph__docs_and_apis(&$variables)
{
    $paragraph = $variables['paragraph'];
    $variables['product_documentation_code'] = $paragraph->field_product_documentation_code->value;
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Add in the metatags for the product pages
 */
function rhd_common_page_attachments_alter(array &$attachments)
{
    // We only want to do this for product pages, everything else will have meta tags
    if (\Drupal::routeMatch()->getRouteName() === 'rhd_common.main_page_controller') {
        // Pull in all the services we need
        $route_params = \Drupal::routeMatch()->getParameters()->all();
        $query = \Drupal::service('entity.query')->get('node', 'AND');
        $global_metatag_manager = \Drupal::entityTypeManager()->getStorage('metatag_defaults');
        $metatag_manager = \Drupal::service('metatag.manager');

        // Find the product based on the product_code
        $query->condition('field_url_product_name', $route_params['product_code']);
        $nid = current($query->execute());
        $product = Node::load($nid);

        if (isset($product)) {
            // Figure out which sub page we're on
            $product_pages = $product->field_product_pages->referencedEntities();
            $active_paragraph = current(array_filter($product_pages, function ($entity) use ($route_params) {
                return strtolower($entity->field_overview_url->value) === $route_params['sub_page'];
            }));

            // Get all the meta tags, many were missed so we're redoing all this logic :(
            $metatags = $global_metatag_manager->load('global');
            $entity_metatags = $global_metatag_manager->load($product->getEntityTypeId());
            $bundle_metatags = $global_metatag_manager->load($product->getEntityTypeId() . '__' . $product->bundle());

            if (isset($bundle_metatags)) {
                $metatags->overwriteTags($bundle_metatags->get('tags'));
            }

            if (isset($entity_metatags)) {
                $metatags->overwriteTags($entity_metatags->get('tags'));
            }

            $metatags->overwriteTags([
              'description' => $active_paragraph->field_page_description->value,
              'title' => $product->label() . ' ' . ucwords($route_params['sub_page']) . ' | [site:name]'
            ]);
            $metatags_elements = $metatag_manager->generateElements($metatags->get('tags'), $product);

            $merged_array = NestedArray::mergeDeep($metatags_elements['#attached']['html_head'],
              $attachments['#attached']['html_head']);
            $attachments['#attached']['html_head'] = $merged_array;
        }
    }
}

include_once 'rhd_common.sitemap.inc';
include_once 'rhd_common.tokens.inc';